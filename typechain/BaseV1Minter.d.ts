/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BaseV1MinterInterface extends ethers.utils.Interface {
  functions: {
    "_token()": FunctionFragment;
    "_ve()": FunctionFragment;
    "_ve_dist()": FunctionFragment;
    "_voter()": FunctionFragment;
    "active_period()": FunctionFragment;
    "calculate_emission()": FunctionFragment;
    "calculate_growth(uint256)": FunctionFragment;
    "circulating_emission()": FunctionFragment;
    "circulating_supply()": FunctionFragment;
    "initialize(address[],uint256[],uint256)": FunctionFragment;
    "update_period()": FunctionFragment;
    "weekly()": FunctionFragment;
    "weekly_emission()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_token", values?: undefined): string;
  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(functionFragment: "_ve_dist", values?: undefined): string;
  encodeFunctionData(functionFragment: "_voter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "active_period",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculate_emission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculate_growth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "circulating_emission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "circulating_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update_period",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weekly", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "weekly_emission",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ve_dist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_voter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "active_period",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculate_emission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculate_growth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circulating_emission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circulating_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "update_period",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weekly", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weekly_emission",
    data: BytesLike
  ): Result;

  events: {
    "Mint(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
}

export type MintEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    sender: string;
    weekly: BigNumber;
    circulating_supply: BigNumber;
    circulating_emission: BigNumber;
  }
>;

export class BaseV1Minter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BaseV1MinterInterface;

  functions: {
    _token(overrides?: CallOverrides): Promise<[string]>;

    _ve(overrides?: CallOverrides): Promise<[string]>;

    _ve_dist(overrides?: CallOverrides): Promise<[string]>;

    _voter(overrides?: CallOverrides): Promise<[string]>;

    active_period(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculate_emission(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculate_growth(
      _minted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    circulating_emission(overrides?: CallOverrides): Promise<[BigNumber]>;

    circulating_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      claimants: string[],
      amounts: BigNumberish[],
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_period(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weekly(overrides?: CallOverrides): Promise<[BigNumber]>;

    weekly_emission(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _token(overrides?: CallOverrides): Promise<string>;

  _ve(overrides?: CallOverrides): Promise<string>;

  _ve_dist(overrides?: CallOverrides): Promise<string>;

  _voter(overrides?: CallOverrides): Promise<string>;

  active_period(overrides?: CallOverrides): Promise<BigNumber>;

  calculate_emission(overrides?: CallOverrides): Promise<BigNumber>;

  calculate_growth(
    _minted: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  circulating_emission(overrides?: CallOverrides): Promise<BigNumber>;

  circulating_supply(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    claimants: string[],
    amounts: BigNumberish[],
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_period(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weekly(overrides?: CallOverrides): Promise<BigNumber>;

  weekly_emission(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _token(overrides?: CallOverrides): Promise<string>;

    _ve(overrides?: CallOverrides): Promise<string>;

    _ve_dist(overrides?: CallOverrides): Promise<string>;

    _voter(overrides?: CallOverrides): Promise<string>;

    active_period(overrides?: CallOverrides): Promise<BigNumber>;

    calculate_emission(overrides?: CallOverrides): Promise<BigNumber>;

    calculate_growth(
      _minted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    circulating_emission(overrides?: CallOverrides): Promise<BigNumber>;

    circulating_supply(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      claimants: string[],
      amounts: BigNumberish[],
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    update_period(overrides?: CallOverrides): Promise<BigNumber>;

    weekly(overrides?: CallOverrides): Promise<BigNumber>;

    weekly_emission(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Mint(address,uint256,uint256,uint256)"(
      sender?: string | null,
      weekly?: null,
      circulating_supply?: null,
      circulating_emission?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        weekly: BigNumber;
        circulating_supply: BigNumber;
        circulating_emission: BigNumber;
      }
    >;

    Mint(
      sender?: string | null,
      weekly?: null,
      circulating_supply?: null,
      circulating_emission?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        weekly: BigNumber;
        circulating_supply: BigNumber;
        circulating_emission: BigNumber;
      }
    >;
  };

  estimateGas: {
    _token(overrides?: CallOverrides): Promise<BigNumber>;

    _ve(overrides?: CallOverrides): Promise<BigNumber>;

    _ve_dist(overrides?: CallOverrides): Promise<BigNumber>;

    _voter(overrides?: CallOverrides): Promise<BigNumber>;

    active_period(overrides?: CallOverrides): Promise<BigNumber>;

    calculate_emission(overrides?: CallOverrides): Promise<BigNumber>;

    calculate_growth(
      _minted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    circulating_emission(overrides?: CallOverrides): Promise<BigNumber>;

    circulating_supply(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      claimants: string[],
      amounts: BigNumberish[],
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_period(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weekly(overrides?: CallOverrides): Promise<BigNumber>;

    weekly_emission(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _ve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _ve_dist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _voter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    active_period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculate_emission(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculate_growth(
      _minted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circulating_emission(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circulating_supply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      claimants: string[],
      amounts: BigNumberish[],
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_period(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weekly(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weekly_emission(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
